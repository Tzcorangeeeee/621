在JS中 所有数字都是Number型

包括整数和浮点数（小数）
无论整浮、浮点数（即小数）、无论大小、无论正负，都是 Number 类型的。
最大正数值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308
最小正数值：Number.MIN_VALUE，这个值为： 5e-324 ，或者 2的负1074 次方。它是能够在浮点精度范围内表示的最小正数（不是最小负数）。小于这个数的正数会被转成0。
如果使用 Number 表示的变量超过了最大值，则会返回 Infinity。
Infinity：无穷大（正无穷）。比如 1/0 的值就是无穷大。
-Infinity：无穷小（负无穷）
注意：typeof Infinity的返回结果是 number。

NaN Not a Number非数值  在进行运算值中 如果得不到正常结果 就返回
console.log('abc' / 18); //结果是NaN
console.log('abc' * 'abcd'); //按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果，结果是NaN。NAN
但是 NAN的类型是 number

      “+”
可以是连字符 也可以是加号
console.log("我" + "爱" + "你");	// 连字符，把三个独立的汉字，连接在一起了
console.log("我+爱+你");			// 原样输出
console.log(1+2+3);				// 输出6

var a = '1';
var b = 2;
console.log(a + b);  12

var a = 1;
var b = 2;
console.log("a" + b);	//"a"就不是变量了！所以就是"a"+2 输出a2

-、*、/、%这几个符号会自动进行隐式转换
var a = '4' + 3 - 6;
console.log(a);
a=37
一步一步算  第一步'4'+3 为字符串 值为43
接着 43 - 6  隐式转换 = 37

小数的计算会不准确

赋值 b=a  把a的值给b b不变


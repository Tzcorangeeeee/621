运算符：+ - * /
表达式：由运算符 数字 变量的组合
运算元：参与运算的对象 一般是数字和变量

1.算数运算符
+ - * / %（取余数） **幂
例如 输入一个345 如何分别得到 3 4 5三个数字

3: 345/100 =3.45 取整为3
4：345%100=45  45/10=4.5 取整为4
5：345%10=5

运算规则：* / ** 优先级高于 + -
从左向右算

**幂运算 2的三次方就是 2**3
Math.pow(2,3)
++  增
！ a是变量 而a++是表达式
-- 减

一元运算符：
1.typeof 变量
  typeof (变量)
  typeof 方法	function
  typeof null	object （空对象)
空数组[]和空对象{}都是object 他们都是引用数据类型
typeof不能区分数组 instanceof可以

+ - 正负号 一元运算
例
var a = true
a = +a
console.log('a:' +a)
结果为 1
typeof a = number


三目运算符 （条件运算符）
条件表达式：语句1：  语句2：
在运算符执行的时候 先对表达式进行求职
如果 值为TRUE 执行语句1 并且返回结果
如果 值为FALSE 执行2 返回结果

三个逻辑运算
&& 与  都是
|| 或  一个
！ 非  不是

console.log(3<4 && 5<4)
返回值 FALSE

判断一个人是否在18-65

const a = prompt()
if (a>18 && a<65){
    alert(ok)
}
else alert(no)

！！！非布尔值运算

两个非布尔值运算
与运算
如果第一个值为FALSE 那么直接执行第一条 并返回第一个值
如果第一个值为TRUE 那么接着执行第二条 并返回第二条值

或运算
如果第一个值为TRUE 那么直接执行并返回
如果第一个值为FALSE 那么继续执行 无论第二条为什么 直接执行并返回

三个非
与运算
从左到右依次进行 直到直到第一个FALSE
如果全都为TRUE 那么返回最后一个值

或运算
依次找到第一个 TRUE
如果都为FALSE 那么返回最后一个值


！非
短路的运算

&&
const a = '1234'
a && alert('a出不出来')
结果会出来

const a = undefined
a && alert('a出不出来')
不会出来
如果第一个值为TRUE 那么接着执行第二个值
如果为FALSE 那么不执行


const result;
var errorMsg = ''
if(result && result.retCode == 0){
    errorMsg='中奖了'；
}

if(result && result.retCode !=0){
    errorMsg=result.msg|| '活动太火爆 ，稍后再试'；(如果有 msg就用 没有就 显示 太火爆)
}

if(!result){
    errorMsg='网络异常'；
}

但前端成功调用了一个借口 返回的数据为result的对象 那么我们用一个变量a来接受result的数据
if( result && result.retCpde==0)
{
    var a = result && result.msg && result.data.imgUrl || 'https ..........'  先获取图片内容 如果没有就调用网址
}

| 运算符 | 运算规则     | 举例                        |
| ------ | ------------ | --------------------------- |
| =      | 直接赋值     | let a = 5                   |
| +=     | 加后赋值     | a += 5 等价于 a = a + 5     |
| -=     | 减后赋值     | a -= 5 等价于 a = a - 5     |
| *=     | 乘后赋值     | a *= 5 等价于 a = a * 5     |
| /=     | 除后赋值     | a /= 5 等价于 a = a / 5     |
| %=     | 取余数后赋值 | a %= 5 等价于 a = a % 5     |
| **=    | 幂运算后赋值 | `a **= 5` 等价于 `a = a**5`

console.log(1 > '0'); //true
如果两个字符串进行比较 那么会先转换成Unicode 编码进行比较
console.log('56' > '123'); // true

==判读是否等于
undefined==null TRUE
== 会进行隐形转换
console.log(null == 0); // 打印结果：false
NaN不跟任何值相等 包括其本身
===全等
无论类型和数值都要相等
